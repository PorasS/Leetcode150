class Solution {

  List < List < String >> res = null;
  public List < List < String >> partition(String s) {

    res = new LinkedList < > ();
    dfs(s, 0, new LinkedList < > ());
    return res;
  }

  public void dfs(String str, int start, List < String > list) {
    if (start >= str.length()) {
      res.add(new LinkedList < > (list));
      return;
    }

    for (int i = start; i < str.length(); i++) {
      if (isPalindrome(str.substring(start, i + 1))) {
        list.add(str.substring(start, i + 1));
        dfs(str, i + 1, list);
        list.remove(list.size() - 1);
      }
    }
  }

  public boolean isPalindrome(String str) {

    int start = 0;
    int end = str.length() - 1;
    if (str.charAt(start) != str.charAt(end)) {
      return false;
    }

    while (start <= end) {
      if (str.charAt(start) != str.charAt(end)) {
        return false;
      }
      start++;
      end--;
    }

    return true;

  }

}
